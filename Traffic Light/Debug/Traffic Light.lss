
Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001422  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be1  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d06  00000000  00000000  0000391b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  74:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <wait5S>:

// Define wait 5 seconds function

void wait5S(void)
{
	TCNT0 = 0x00;		//set timer to 0
  7c:	12 be       	out	0x32, r1	; 50
	SET_BIT(TCCR0,0);	//start timer
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	81 60       	ori	r24, 0x01	; 1
  82:	83 bf       	out	0x33, r24	; 51
	overflowcounter = 0;
  84:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowcounter+0x1>
  88:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflowcounter>
	while(overflowcounter<=OVERFLOWS){
  8c:	0f c0       	rjmp	.+30     	; 0xac <wait5S+0x30>
		while(!READ_BIT(TIFR,0));
  8e:	08 b6       	in	r0, 0x38	; 56
  90:	00 fe       	sbrs	r0, 0
  92:	fd cf       	rjmp	.-6      	; 0x8e <wait5S+0x12>
		SET_BIT(TIFR,0);
  94:	88 b7       	in	r24, 0x38	; 56
  96:	81 60       	ori	r24, 0x01	; 1
  98:	88 bf       	out	0x38, r24	; 56
		overflowcounter++;
  9a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowcounter>
  9e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowcounter+0x1>
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <overflowcounter+0x1>
  a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflowcounter>
void wait5S(void)
{
	TCNT0 = 0x00;		//set timer to 0
	SET_BIT(TCCR0,0);	//start timer
	overflowcounter = 0;
	while(overflowcounter<=OVERFLOWS){
  ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowcounter>
  b0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowcounter+0x1>
  b4:	8d 34       	cpi	r24, 0x4D	; 77
  b6:	9c 44       	sbci	r25, 0x4C	; 76
  b8:	50 f3       	brcs	.-44     	; 0x8e <wait5S+0x12>
		while(!READ_BIT(TIFR,0));
		SET_BIT(TIFR,0);
		overflowcounter++;
	}
}
  ba:	08 95       	ret

000000bc <blinkwait>:


// Define blink for 5 seconds

void blinkwait(uint8_t port1, uint8_t pin1, uint8_t port2, uint8_t pin2)
{
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	18 2f       	mov	r17, r24
  c6:	d6 2f       	mov	r29, r22
  c8:	c4 2f       	mov	r28, r20
  ca:	02 2f       	mov	r16, r18
		unsigned int togglecounter;
		TCNT0 = 0x00;		//set timer to 0
  cc:	12 be       	out	0x32, r1	; 50
		SET_BIT(TCCR0,0);	//start timer
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	83 bf       	out	0x33, r24	; 51
		overflowcounter = 0;
  d4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowcounter+0x1>
  d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflowcounter>
		while(overflowcounter<=OVERFLOWS){
  dc:	1f c0       	rjmp	.+62     	; 0x11c <blinkwait+0x60>
			while(!READ_BIT(TIFR,0));
  de:	08 b6       	in	r0, 0x38	; 56
  e0:	00 fe       	sbrs	r0, 0
  e2:	fd cf       	rjmp	.-6      	; 0xde <blinkwait+0x22>
			SET_BIT(TIFR,0);
  e4:	88 b7       	in	r24, 0x38	; 56
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	88 bf       	out	0x38, r24	; 56
			overflowcounter++;
  ea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowcounter>
  ee:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowcounter+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <overflowcounter+0x1>
  f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflowcounter>
			togglecounter++;
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
			if(togglecounter ==2000){
 100:	20 3d       	cpi	r18, 0xD0	; 208
 102:	47 e0       	ldi	r20, 0x07	; 7
 104:	34 07       	cpc	r19, r20
 106:	61 f4       	brne	.+24     	; 0x120 <blinkwait+0x64>
				LED_Toggle(port1,pin1);
 108:	6d 2f       	mov	r22, r29
 10a:	81 2f       	mov	r24, r17
 10c:	0e 94 bc 01 	call	0x378	; 0x378 <LED_Toggle>
				togglecounter=0;
				if(port2){
 110:	cc 23       	and	r28, r28
 112:	21 f0       	breq	.+8      	; 0x11c <blinkwait+0x60>
				LED_Toggle(port2,pin2);
 114:	60 2f       	mov	r22, r16
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 bc 01 	call	0x378	; 0x378 <LED_Toggle>


// Define blink for 5 seconds

void blinkwait(uint8_t port1, uint8_t pin1, uint8_t port2, uint8_t pin2)
{
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
		unsigned int togglecounter;
		TCNT0 = 0x00;		//set timer to 0
		SET_BIT(TCCR0,0);	//start timer
		overflowcounter = 0;
		while(overflowcounter<=OVERFLOWS){
 120:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowcounter>
 124:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowcounter+0x1>
 128:	8d 34       	cpi	r24, 0x4D	; 77
 12a:	9c 44       	sbci	r25, 0x4C	; 76
 12c:	c0 f2       	brcs	.-80     	; 0xde <blinkwait+0x22>
				if(port2){
				LED_Toggle(port2,pin2);
				}
			}
		}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <APP_init>:

void APP_init(void){		
	
// Enable global interrupts

sei();
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8f bf       	out	0x3f, r24	; 63

// Choose external interrupt sense, rising edge

SET_BIT(MCUCR,0);
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 bf       	out	0x35, r24	; 53
SET_BIT(MCUCR,1);
 144:	85 b7       	in	r24, 0x35	; 53
 146:	82 60       	ori	r24, 0x02	; 2
 148:	85 bf       	out	0x35, r24	; 53

// Enable external interrupt INT0 

SET_BIT(GICR,6);
 14a:	8b b7       	in	r24, 0x3b	; 59
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	8b bf       	out	0x3b, r24	; 59

// Choose timer mode

TCCR0 = 0x00;
 150:	13 be       	out	0x33, r1	; 51

// Set timer initial value

TCNT0 = 0x00;
 152:	12 be       	out	0x32, r1	; 50


// Initialize LED pins as outputs

LED_init(CAR,R);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 b0 01 	call	0x360	; 0x360 <LED_init>
LED_init(CAR,Y);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 b0 01 	call	0x360	; 0x360 <LED_init>
LED_init(CAR,G);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 b0 01 	call	0x360	; 0x360 <LED_init>

LED_init(PEDESTRIAN,R);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 b0 01 	call	0x360	; 0x360 <LED_init>
LED_init(PEDESTRIAN,Y);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	82 e4       	ldi	r24, 0x42	; 66
 178:	0e 94 b0 01 	call	0x360	; 0x360 <LED_init>
LED_init(PEDESTRIAN,G);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	0e 94 b0 01 	call	0x360	; 0x360 <LED_init>

// Initialize button pin as input

button_init(INT_port, INT_pin);
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	84 e4       	ldi	r24, 0x44	; 68
 188:	0e 94 ac 01 	call	0x358	; 0x358 <button_init>
 18c:	08 95       	ret

0000018e <APP_start>:
*/

void APP_start(void)
{
	while(1){
	interrupt = 0;
 18e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(interrupt == 0) LED_ON(PEDESTRIAN,R);	
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 b4 01 	call	0x368	; 0x368 <LED_ON>
	if(interrupt == 0) LED_ON(CAR, G);
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19e:	81 11       	cpse	r24, r1
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <APP_start+0x1c>
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 b4 01 	call	0x368	; 0x368 <LED_ON>
	if(interrupt == 0) wait5S();
 1aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	81 11       	cpse	r24, r1
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <APP_start+0x28>
 1b2:	0e 94 3e 00 	call	0x7c	; 0x7c <wait5S>
	if(interrupt == 0) LED_OFF(CAR,G);
 1b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	81 11       	cpse	r24, r1
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <APP_start+0x38>
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
	if(interrupt == 0) blinkwait(CAR,Y,0,0);
 1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	81 11       	cpse	r24, r1
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <APP_start+0x4c>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 5e 00 	call	0xbc	; 0xbc <blinkwait>
	if(interrupt == 0) LED_OFF(CAR,Y);
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1de:	81 11       	cpse	r24, r1
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <APP_start+0x5c>
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
	if(interrupt == 0) LED_ON(CAR,R);
 1ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ee:	81 11       	cpse	r24, r1
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <APP_start+0x6c>
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	0e 94 b4 01 	call	0x368	; 0x368 <LED_ON>
	if(interrupt == 0) wait5S();
 1fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fe:	81 11       	cpse	r24, r1
 200:	02 c0       	rjmp	.+4      	; 0x206 <APP_start+0x78>
 202:	0e 94 3e 00 	call	0x7c	; 0x7c <wait5S>
	if(interrupt == 0) LED_OFF(CAR,R);
 206:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	81 11       	cpse	r24, r1
 20c:	04 c0       	rjmp	.+8      	; 0x216 <APP_start+0x88>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e4       	ldi	r24, 0x41	; 65
 212:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
	if(interrupt == 0) blinkwait(CAR,Y,0,0);
 216:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21a:	81 11       	cpse	r24, r1
 21c:	06 c0       	rjmp	.+12     	; 0x22a <APP_start+0x9c>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 5e 00 	call	0xbc	; 0xbc <blinkwait>
	if(interrupt == 0) LED_OFF(CAR,Y);
 22a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 22e:	81 11       	cpse	r24, r1
 230:	ae cf       	rjmp	.-164    	; 0x18e <APP_start>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
 23a:	a9 cf       	rjmp	.-174    	; 0x18e <APP_start>

0000023c <__vector_1>:
Operation returns to normal mode

*/

ISR(EXT_int_0)
{	
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	1f 92       	push	r1
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	interrupt = 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	uint8_t value;
	DIO_read(CAR,R,&value);
 26e:	ae 01       	movw	r20, r28
 270:	4f 5f       	subi	r20, 0xFF	; 255
 272:	5f 4f       	sbci	r21, 0xFF	; 255
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	81 e4       	ldi	r24, 0x41	; 65
 278:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_read>
	if(value)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	88 23       	and	r24, r24
 280:	09 f1       	breq	.+66     	; 0x2c4 <__vector_1+0x88>
	{
		LED_OFF(PEDESTRIAN,R);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_ON(PEDESTRIAN,G);
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	82 e4       	ldi	r24, 0x42	; 66
 28e:	0e 94 b4 01 	call	0x368	; 0x368 <LED_ON>
		wait5S();
 292:	0e 94 3e 00 	call	0x7c	; 0x7c <wait5S>
		LED_OFF(CAR,R);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		blinkwait(CAR,Y,PEDESTRIAN,Y);
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	42 e4       	ldi	r20, 0x42	; 66
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 5e 00 	call	0xbc	; 0xbc <blinkwait>
		LED_OFF(PEDESTRIAN,Y);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	82 e4       	ldi	r24, 0x42	; 66
 2ae:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_OFF(CAR,Y);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	81 e4       	ldi	r24, 0x41	; 65
 2b6:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_OFF(PEDESTRIAN,G);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	82 e4       	ldi	r24, 0x42	; 66
 2be:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
 2c2:	36 c0       	rjmp	.+108    	; 0x330 <__vector_1+0xf4>
	}
	else
	{
		LED_OFF(CAR,G);
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e4       	ldi	r24, 0x41	; 65
 2c8:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		blinkwait(CAR,Y,PEDESTRIAN,Y);
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	42 e4       	ldi	r20, 0x42	; 66
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 5e 00 	call	0xbc	; 0xbc <blinkwait>
		LED_OFF(CAR,Y);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	81 e4       	ldi	r24, 0x41	; 65
 2dc:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_OFF(PEDESTRIAN,Y);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	82 e4       	ldi	r24, 0x42	; 66
 2e4:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_ON(CAR,R);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	0e 94 b4 01 	call	0x368	; 0x368 <LED_ON>
		LED_OFF(PEDESTRIAN,R);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	82 e4       	ldi	r24, 0x42	; 66
 2f4:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_ON(PEDESTRIAN,G);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	82 e4       	ldi	r24, 0x42	; 66
 2fc:	0e 94 b4 01 	call	0x368	; 0x368 <LED_ON>
		wait5S();
 300:	0e 94 3e 00 	call	0x7c	; 0x7c <wait5S>
		LED_OFF(CAR,R);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	81 e4       	ldi	r24, 0x41	; 65
 308:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		blinkwait(CAR,Y,PEDESTRIAN,Y);		
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	42 e4       	ldi	r20, 0x42	; 66
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	0e 94 5e 00 	call	0xbc	; 0xbc <blinkwait>
		LED_OFF(CAR,Y);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	81 e4       	ldi	r24, 0x41	; 65
 31c:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_OFF(PEDESTRIAN,Y);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	82 e4       	ldi	r24, 0x42	; 66
 324:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
		LED_OFF(PEDESTRIAN,G);
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	82 e4       	ldi	r24, 0x42	; 66
 32c:	0e 94 b8 01 	call	0x370	; 0x370 <LED_OFF>
	}
	
}
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <button_init>:

#include "Button.h"

void button_init(uint8_t buttonPort, uint8_t buttonPin)
{
	 DIO_init(buttonPort, buttonPin, IN);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_init>
 35e:	08 95       	ret

00000360 <LED_init>:

#include "LED.h"

void LED_init (uint8_t ledPort, uint8_t ledPin)
{
	 DIO_init(ledPort, ledPin, OUT);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_init>
 366:	08 95       	ret

00000368 <LED_ON>:
}

void LED_ON (uint8_t ledPort, uint8_t ledPin)
{
	 DIO_write(ledPort, ledPin, HIGH);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
 36e:	08 95       	ret

00000370 <LED_OFF>:
}

void LED_OFF (uint8_t ledPort, uint8_t ledPin)
{
	 DIO_write(ledPort, ledPin, LOW);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
 376:	08 95       	ret

00000378 <LED_Toggle>:
}

void LED_Toggle (uint8_t ledPort, uint8_t ledPin)
{
	 DIO_toggle(ledPort,ledPin);
 378:	0e 94 21 03 	call	0x642	; 0x642 <DIO_toggle>
 37c:	08 95       	ret

0000037e <main>:
	//LED_test();
	//button_test();
	
	
	
	APP_init();		
 37e:	0e 94 9c 00 	call	0x138	; 0x138 <APP_init>
		
	APP_start();
 382:	0e 94 c7 00 	call	0x18e	; 0x18e <APP_start>
	
}
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret

0000038c <errorhandler>:


// Define error handler

void errorhandler(EN_DIO_error_t status){
	while(status!=0){
 38c:	11 c0       	rjmp	.+34     	; 0x3b0 <errorhandler+0x24>
	CLR_BIT(PORTC,0);		
 38e:	95 b3       	in	r25, 0x15	; 21
 390:	9e 7f       	andi	r25, 0xFE	; 254
 392:	95 bb       	out	0x15, r25	; 21
	SET_BIT(DDRC,status);
 394:	94 b3       	in	r25, 0x14	; 20
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	08 2e       	mov	r0, r24
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <errorhandler+0x16>
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <errorhandler+0x12>
 3a6:	92 2b       	or	r25, r18
 3a8:	94 bb       	out	0x14, r25	; 20
	SET_BIT(PORTC,status);	
 3aa:	95 b3       	in	r25, 0x15	; 21
 3ac:	29 2b       	or	r18, r25
 3ae:	25 bb       	out	0x15, r18	; 21


// Define error handler

void errorhandler(EN_DIO_error_t status){
	while(status!=0){
 3b0:	81 11       	cpse	r24, r1
 3b2:	ed cf       	rjmp	.-38     	; 0x38e <errorhandler+0x2>
	CLR_BIT(PORTC,0);		
	SET_BIT(DDRC,status);
	SET_BIT(PORTC,status);	
	}
	SET_BIT(DDRC,0);
 3b4:	84 b3       	in	r24, 0x14	; 20
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,0);
 3ba:	85 b3       	in	r24, 0x15	; 21
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	85 bb       	out	0x15, r24	; 21
 3c0:	08 95       	ret

000003c2 <DIO_init>:

#include "DIO.h"

void DIO_init(uint8_t portName, uint8_t pinNumber, uint8_t direction)
{
	if(pinNumber<=7){
 3c2:	68 30       	cpi	r22, 0x08	; 8
 3c4:	08 f0       	brcs	.+2      	; 0x3c8 <DIO_init+0x6>
 3c6:	99 c0       	rjmp	.+306    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
		switch(portName)
 3c8:	82 34       	cpi	r24, 0x42	; 66
 3ca:	69 f1       	breq	.+90     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3cc:	18 f4       	brcc	.+6      	; 0x3d4 <DIO_init+0x12>
 3ce:	81 34       	cpi	r24, 0x41	; 65
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <DIO_init+0x20>
 3d2:	8f c0       	rjmp	.+286    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 3d4:	83 34       	cpi	r24, 0x43	; 67
 3d6:	09 f4       	brne	.+2      	; 0x3da <DIO_init+0x18>
 3d8:	48 c0       	rjmp	.+144    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 3da:	84 34       	cpi	r24, 0x44	; 68
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_init+0x1e>
 3de:	67 c0       	rjmp	.+206    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 3e0:	88 c0       	rjmp	.+272    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
		{
		case 'A':
			if(direction == IN){
 3e2:	41 11       	cpse	r20, r1
 3e4:	0c c0       	rjmp	.+24     	; 0x3fe <DIO_init+0x3c>
				CLR_BIT(DDRA,pinNumber);
 3e6:	2a b3       	in	r18, 0x1a	; 26
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_init+0x30>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_init+0x2c>
 3f6:	80 95       	com	r24
 3f8:	82 23       	and	r24, r18
 3fa:	8a bb       	out	0x1a, r24	; 26
 3fc:	10 c0       	rjmp	.+32     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			}
			else if(direction == OUT)
 3fe:	41 30       	cpi	r20, 0x01	; 1
 400:	59 f4       	brne	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			{
				SET_BIT(DDRA,pinNumber);
 402:	2a b3       	in	r18, 0x1a	; 26
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	82 2b       	or	r24, r18
 414:	8a bb       	out	0x1a, r24	; 26
 416:	03 c0       	rjmp	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			}
			else
			{
				errorhandler(DIO_WRONG_DIRECTION);	
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			}
			errorhandler(DIO_OK);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 424:	08 95       	ret
		
		case 'B':
			if(direction == IN){
 426:	41 11       	cpse	r20, r1
 428:	0c c0       	rjmp	.+24     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				CLR_BIT(DDRB,pinNumber);
 42a:	27 b3       	in	r18, 0x17	; 23
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	87 bb       	out	0x17, r24	; 23
 440:	10 c0       	rjmp	.+32     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			}
			else if(direction == OUT)
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	59 f4       	brne	.+22     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				SET_BIT(DDRB,pinNumber);
 446:	27 b3       	in	r18, 0x17	; 23
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	87 bb       	out	0x17, r24	; 23
 45a:	03 c0       	rjmp	.+6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			}
			else
			{
				errorhandler(DIO_WRONG_DIRECTION);		
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			}
			errorhandler(DIO_OK);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 468:	08 95       	ret
		
		case 'C':
			if(direction == IN){
 46a:	41 11       	cpse	r20, r1
 46c:	0c c0       	rjmp	.+24     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				CLR_BIT(DDRC,pinNumber);
 46e:	24 b3       	in	r18, 0x14	; 20
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	84 bb       	out	0x14, r24	; 20
 484:	10 c0       	rjmp	.+32     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			}
			else if(direction == OUT)
 486:	41 30       	cpi	r20, 0x01	; 1
 488:	59 f4       	brne	.+22     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			{
				SET_BIT(DDRC,pinNumber);
 48a:	24 b3       	in	r18, 0x14	; 20
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	82 2b       	or	r24, r18
 49c:	84 bb       	out	0x14, r24	; 20
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			}
			else
			{
				errorhandler(DIO_WRONG_DIRECTION);
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			}
			errorhandler(DIO_OK);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 4ac:	08 95       	ret
		
		case 'D':
			if(direction == IN){
 4ae:	41 11       	cpse	r20, r1
 4b0:	0c c0       	rjmp	.+24     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
				CLR_BIT(DDRD,pinNumber);
 4b2:	21 b3       	in	r18, 0x11	; 17
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	80 95       	com	r24
 4c4:	82 23       	and	r24, r18
 4c6:	81 bb       	out	0x11, r24	; 17
 4c8:	10 c0       	rjmp	.+32     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			else if(direction == OUT)
 4ca:	41 30       	cpi	r20, 0x01	; 1
 4cc:	59 f4       	brne	.+22     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			{
				SET_BIT(DDRD,pinNumber);
 4ce:	21 b3       	in	r18, 0x11	; 17
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	6a 95       	dec	r22
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4de:	82 2b       	or	r24, r18
 4e0:	81 bb       	out	0x11, r24	; 17
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			}
			else
			{
				errorhandler(DIO_WRONG_DIRECTION);
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			}
			errorhandler(DIO_OK);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 4f0:	08 95       	ret
		default: errorhandler(DIO_WRONG_PORT_NUMBER);
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 4f8:	08 95       	ret
		}	
	
	}
	else errorhandler(DIO_WRONG_PIN_NUMBER);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 500:	08 95       	ret

00000502 <DIO_write>:
	
}

void DIO_write(uint8_t portName, uint8_t pinNumber, uint8_t value)
{
	if(pinNumber<=7){
 502:	68 30       	cpi	r22, 0x08	; 8
 504:	08 f0       	brcs	.+2      	; 0x508 <DIO_write+0x6>
 506:	99 c0       	rjmp	.+306    	; 0x63a <DIO_write+0x138>
	switch(portName)
 508:	82 34       	cpi	r24, 0x42	; 66
 50a:	69 f1       	breq	.+90     	; 0x566 <DIO_write+0x64>
 50c:	18 f4       	brcc	.+6      	; 0x514 <DIO_write+0x12>
 50e:	81 34       	cpi	r24, 0x41	; 65
 510:	41 f0       	breq	.+16     	; 0x522 <DIO_write+0x20>
 512:	8f c0       	rjmp	.+286    	; 0x632 <DIO_write+0x130>
 514:	83 34       	cpi	r24, 0x43	; 67
 516:	09 f4       	brne	.+2      	; 0x51a <DIO_write+0x18>
 518:	48 c0       	rjmp	.+144    	; 0x5aa <DIO_write+0xa8>
 51a:	84 34       	cpi	r24, 0x44	; 68
 51c:	09 f4       	brne	.+2      	; 0x520 <DIO_write+0x1e>
 51e:	67 c0       	rjmp	.+206    	; 0x5ee <DIO_write+0xec>
 520:	88 c0       	rjmp	.+272    	; 0x632 <DIO_write+0x130>
		{
		case 'A':
		if(value == LOW){
 522:	41 11       	cpse	r20, r1
 524:	0c c0       	rjmp	.+24     	; 0x53e <DIO_write+0x3c>
			CLR_BIT(PORTA,pinNumber);
 526:	2b b3       	in	r18, 0x1b	; 27
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_write+0x30>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_write+0x2c>
 536:	80 95       	com	r24
 538:	82 23       	and	r24, r18
 53a:	8b bb       	out	0x1b, r24	; 27
 53c:	10 c0       	rjmp	.+32     	; 0x55e <DIO_write+0x5c>
		}
		else if(value == HIGH)
 53e:	41 30       	cpi	r20, 0x01	; 1
 540:	59 f4       	brne	.+22     	; 0x558 <DIO_write+0x56>
		{
			SET_BIT(PORTA,pinNumber);
 542:	2b b3       	in	r18, 0x1b	; 27
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_write+0x4c>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_write+0x48>
 552:	82 2b       	or	r24, r18
 554:	8b bb       	out	0x1b, r24	; 27
 556:	03 c0       	rjmp	.+6      	; 0x55e <DIO_write+0x5c>
		}
		else
		{
			errorhandler(DIO_WRONG_VALUE);	
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		}
		errorhandler(DIO_OK);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 564:	08 95       	ret
		
		case 'B':
		if(value == LOW){
 566:	41 11       	cpse	r20, r1
 568:	0c c0       	rjmp	.+24     	; 0x582 <DIO_write+0x80>
			CLR_BIT(PORTB,pinNumber);
 56a:	28 b3       	in	r18, 0x18	; 24
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_write+0x74>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_write+0x70>
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	88 bb       	out	0x18, r24	; 24
 580:	10 c0       	rjmp	.+32     	; 0x5a2 <DIO_write+0xa0>
		}
		else if(value == HIGH)
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	59 f4       	brne	.+22     	; 0x59c <DIO_write+0x9a>
		{
			SET_BIT(PORTB,pinNumber);
 586:	28 b3       	in	r18, 0x18	; 24
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_write+0x90>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_write+0x8c>
 596:	82 2b       	or	r24, r18
 598:	88 bb       	out	0x18, r24	; 24
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <DIO_write+0xa0>
		}
		else
		{
			errorhandler(DIO_WRONG_VALUE);
 59c:	84 e0       	ldi	r24, 0x04	; 4
 59e:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		}
		errorhandler(DIO_OK);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 5a8:	08 95       	ret
		
		case 'C':
		if(value == LOW){
 5aa:	41 11       	cpse	r20, r1
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <DIO_write+0xc4>
			CLR_BIT(PORTC,pinNumber);
 5ae:	25 b3       	in	r18, 0x15	; 21
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_write+0xb8>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_write+0xb4>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	10 c0       	rjmp	.+32     	; 0x5e6 <DIO_write+0xe4>
		}
		else if(value == HIGH)
 5c6:	41 30       	cpi	r20, 0x01	; 1
 5c8:	59 f4       	brne	.+22     	; 0x5e0 <DIO_write+0xde>
		{
			SET_BIT(PORTC,pinNumber);
 5ca:	25 b3       	in	r18, 0x15	; 21
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_write+0xd4>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_write+0xd0>
 5da:	82 2b       	or	r24, r18
 5dc:	85 bb       	out	0x15, r24	; 21
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <DIO_write+0xe4>
		}
		else
		{
			errorhandler(DIO_WRONG_VALUE);
 5e0:	84 e0       	ldi	r24, 0x04	; 4
 5e2:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		}
		errorhandler(DIO_OK);
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 5ec:	08 95       	ret
		
		case 'D':
		if(value == LOW){
 5ee:	41 11       	cpse	r20, r1
 5f0:	0c c0       	rjmp	.+24     	; 0x60a <DIO_write+0x108>
			CLR_BIT(PORTD,pinNumber);
 5f2:	22 b3       	in	r18, 0x12	; 18
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_write+0xfc>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_write+0xf8>
 602:	80 95       	com	r24
 604:	82 23       	and	r24, r18
 606:	82 bb       	out	0x12, r24	; 18
 608:	10 c0       	rjmp	.+32     	; 0x62a <DIO_write+0x128>
		}
		else if(value == HIGH)
 60a:	41 30       	cpi	r20, 0x01	; 1
 60c:	59 f4       	brne	.+22     	; 0x624 <DIO_write+0x122>
		{
			SET_BIT(PORTD,pinNumber);
 60e:	22 b3       	in	r18, 0x12	; 18
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_write+0x118>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_write+0x114>
 61e:	82 2b       	or	r24, r18
 620:	82 bb       	out	0x12, r24	; 18
 622:	03 c0       	rjmp	.+6      	; 0x62a <DIO_write+0x128>
		}
		else
		{
			errorhandler(DIO_WRONG_VALUE);
 624:	84 e0       	ldi	r24, 0x04	; 4
 626:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		}
		errorhandler(DIO_OK);
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 630:	08 95       	ret
		
		default: errorhandler(DIO_WRONG_PORT_NUMBER);
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 638:	08 95       	ret
		}
	}
	else errorhandler(DIO_WRONG_PIN_NUMBER);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 640:	08 95       	ret

00000642 <DIO_toggle>:
}

void DIO_toggle(uint8_t portName, uint8_t pinNumber)
{
	if(pinNumber <=7){
 642:	68 30       	cpi	r22, 0x08	; 8
 644:	08 f0       	brcs	.+2      	; 0x648 <DIO_toggle+0x6>
 646:	47 c0       	rjmp	.+142    	; 0x6d6 <DIO_toggle+0x94>
	switch(portName)
 648:	82 34       	cpi	r24, 0x42	; 66
 64a:	b9 f0       	breq	.+46     	; 0x67a <DIO_toggle+0x38>
 64c:	18 f4       	brcc	.+6      	; 0x654 <DIO_toggle+0x12>
 64e:	81 34       	cpi	r24, 0x41	; 65
 650:	31 f0       	breq	.+12     	; 0x65e <DIO_toggle+0x1c>
 652:	3d c0       	rjmp	.+122    	; 0x6ce <DIO_toggle+0x8c>
 654:	83 34       	cpi	r24, 0x43	; 67
 656:	f9 f0       	breq	.+62     	; 0x696 <DIO_toggle+0x54>
 658:	84 34       	cpi	r24, 0x44	; 68
 65a:	59 f1       	breq	.+86     	; 0x6b2 <DIO_toggle+0x70>
 65c:	38 c0       	rjmp	.+112    	; 0x6ce <DIO_toggle+0x8c>
		{
		case 'A':
			TOGGLE_BIT(PORTA,pinNumber);
 65e:	2b b3       	in	r18, 0x1b	; 27
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_toggle+0x28>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_toggle+0x24>
 66e:	82 27       	eor	r24, r18
 670:	8b bb       	out	0x1b, r24	; 27
			errorhandler(DIO_OK);
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 678:	08 95       	ret
		case 'B':
			TOGGLE_BIT(PORTB,pinNumber);
 67a:	28 b3       	in	r18, 0x18	; 24
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_toggle+0x44>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	6a 95       	dec	r22
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_toggle+0x40>
 68a:	82 27       	eor	r24, r18
 68c:	88 bb       	out	0x18, r24	; 24
			errorhandler(DIO_OK);
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 694:	08 95       	ret
		case 'C':
			TOGGLE_BIT(PORTC,pinNumber);
 696:	25 b3       	in	r18, 0x15	; 21
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_toggle+0x60>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_toggle+0x5c>
 6a6:	82 27       	eor	r24, r18
 6a8:	85 bb       	out	0x15, r24	; 21
			errorhandler(DIO_OK);
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 6b0:	08 95       	ret
		case 'D':
			TOGGLE_BIT(PORTD,pinNumber);
 6b2:	22 b3       	in	r18, 0x12	; 18
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_toggle+0x7c>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_toggle+0x78>
 6c2:	82 27       	eor	r24, r18
 6c4:	82 bb       	out	0x12, r24	; 18
			errorhandler(DIO_OK);
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
			break;
 6cc:	08 95       	ret
		default: errorhandler(DIO_WRONG_PORT_NUMBER);
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 6d4:	08 95       	ret
		}
	}
	else errorhandler(DIO_WRONG_PIN_NUMBER);
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 6dc:	08 95       	ret

000006de <DIO_read>:
}

void DIO_read(uint8_t portName, uint8_t pinNumber, uint8_t *value)
{
	if(pinNumber<=7){
 6de:	68 30       	cpi	r22, 0x08	; 8
 6e0:	08 f0       	brcs	.+2      	; 0x6e4 <DIO_read+0x6>
 6e2:	74 c0       	rjmp	.+232    	; 0x7cc <DIO_read+0xee>
	switch(portName)
 6e4:	82 34       	cpi	r24, 0x42	; 66
 6e6:	19 f1       	breq	.+70     	; 0x72e <DIO_read+0x50>
 6e8:	18 f4       	brcc	.+6      	; 0x6f0 <DIO_read+0x12>
 6ea:	81 34       	cpi	r24, 0x41	; 65
 6ec:	39 f0       	breq	.+14     	; 0x6fc <DIO_read+0x1e>
 6ee:	6a c0       	rjmp	.+212    	; 0x7c4 <DIO_read+0xe6>
 6f0:	83 34       	cpi	r24, 0x43	; 67
 6f2:	b1 f1       	breq	.+108    	; 0x760 <DIO_read+0x82>
 6f4:	84 34       	cpi	r24, 0x44	; 68
 6f6:	09 f4       	brne	.+2      	; 0x6fa <DIO_read+0x1c>
 6f8:	4c c0       	rjmp	.+152    	; 0x792 <DIO_read+0xb4>
 6fa:	64 c0       	rjmp	.+200    	; 0x7c4 <DIO_read+0xe6>
	{
		case 'A':
		*value = READ_BIT(PINA,pinNumber);
 6fc:	79 b3       	in	r23, 0x19	; 25
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	9c 01       	movw	r18, r24
 704:	06 2e       	mov	r0, r22
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_read+0x2e>
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	0a 94       	dec	r0
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_read+0x2a>
 710:	87 2f       	mov	r24, r23
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	82 23       	and	r24, r18
 716:	93 23       	and	r25, r19
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_read+0x40>
 71a:	95 95       	asr	r25
 71c:	87 95       	ror	r24
 71e:	6a 95       	dec	r22
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_read+0x3c>
 722:	fa 01       	movw	r30, r20
 724:	80 83       	st	Z, r24
		errorhandler(DIO_OK);
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 72c:	08 95       	ret
		case 'B':
		*value = READ_BIT(PINB,pinNumber);
 72e:	76 b3       	in	r23, 0x16	; 22
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	9c 01       	movw	r18, r24
 736:	06 2e       	mov	r0, r22
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_read+0x60>
 73a:	22 0f       	add	r18, r18
 73c:	33 1f       	adc	r19, r19
 73e:	0a 94       	dec	r0
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_read+0x5c>
 742:	87 2f       	mov	r24, r23
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	82 23       	and	r24, r18
 748:	93 23       	and	r25, r19
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_read+0x72>
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
 750:	6a 95       	dec	r22
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_read+0x6e>
 754:	fa 01       	movw	r30, r20
 756:	80 83       	st	Z, r24
		errorhandler(DIO_OK);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 75e:	08 95       	ret
		case 'C':
		*value = READ_BIT(PINC,pinNumber);
 760:	73 b3       	in	r23, 0x13	; 19
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9c 01       	movw	r18, r24
 768:	06 2e       	mov	r0, r22
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_read+0x92>
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_read+0x8e>
 774:	87 2f       	mov	r24, r23
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	82 23       	and	r24, r18
 77a:	93 23       	and	r25, r19
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_read+0xa4>
 77e:	95 95       	asr	r25
 780:	87 95       	ror	r24
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_read+0xa0>
 786:	fa 01       	movw	r30, r20
 788:	80 83       	st	Z, r24
		errorhandler(DIO_OK);
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 790:	08 95       	ret
		case 'D':
		*value = READ_BIT(PIND,pinNumber);
 792:	70 b3       	in	r23, 0x10	; 16
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	9c 01       	movw	r18, r24
 79a:	06 2e       	mov	r0, r22
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_read+0xc4>
 79e:	22 0f       	add	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	0a 94       	dec	r0
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_read+0xc0>
 7a6:	87 2f       	mov	r24, r23
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	82 23       	and	r24, r18
 7ac:	93 23       	and	r25, r19
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_read+0xd6>
 7b0:	95 95       	asr	r25
 7b2:	87 95       	ror	r24
 7b4:	6a 95       	dec	r22
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_read+0xd2>
 7b8:	fa 01       	movw	r30, r20
 7ba:	80 83       	st	Z, r24
		errorhandler(DIO_OK);
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
		break;
 7c2:	08 95       	ret
		default: errorhandler(DIO_WRONG_PORT_NUMBER);
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 7ca:	08 95       	ret
	}
	}
	else errorhandler(DIO_WRONG_PIN_NUMBER);
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	0e 94 c6 01 	call	0x38c	; 0x38c <errorhandler>
 7d2:	08 95       	ret

000007d4 <_exit>:
 7d4:	f8 94       	cli

000007d6 <__stop_program>:
 7d6:	ff cf       	rjmp	.-2      	; 0x7d6 <__stop_program>
